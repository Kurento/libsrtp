From: Juan Navarro <juan.navarro@gmx.es>
Date: Thu, 30 May 2019 12:31:13 +0200
Subject: Allow receiving repeated packets (rx replay)

Force allowing replayed RTP packets at reception (which is forbidden by
libsrtp but we need it). We need to force it always, because the srtpdec
element in gst-plugins-bad doesn't provide any API to change the
'allow_repeat_tx' flag in libsrtp.

This is needed because Kurento doesn't implement a retransmission queue,
and instead, all NACK requests get pased through to the original sender
of the packets that got lost upon reception.

With this change, Kurento is able to receive packets that had been
already received (replay on reception, checked at srtp_unprotect()),
which adds up to the already existing capability of re-sending RTP
packets that had been already sent (replay on transmission, checked at
srtp_protect(). This feature had been asked for in the libsrtp
bugtracker but the authors rejected it for security reasons:
* https://github.com/cisco/libsrtp/pull/37
* https://github.com/cisco/libsrtp/pull/63

This change is in spirit a summary of old changes for Kurento that were
done at:
* https://github.com/Kurento/libsrtp/commit/b27df0c85f0553e7a04fc4acd699c634061c931c
* https://github.com/Kurento/libsrtp/commit/c6972859b539099193deb91e8c002c8a13cf58ea
* https://github.com/Kurento/libsrtp/commit/55bec21f7cb50cc940d341dd28ebb8a97a79ee5e

However, the old code had two problems:
* It ignored not only replay errors, but *all* of them (!!)
* It didn't actually work! because setting 'allow_repeat_tx = true' is
only done by GStreamer's srtpenc but not srtpdec, which means that
reception replays were still rejected by libsrtp, even when these
changes were applied.
---
 srtp/srtp.c        | 7 +++++--
 test/srtp_driver.c | 6 +++---
 2 files changed, 8 insertions(+), 5 deletions(-)

Index: libsrtp2-2.3.0/srtp/srtp.c
===================================================================
--- libsrtp2-2.3.0.orig/srtp/srtp.c
+++ libsrtp2-2.3.0/srtp/srtp.c
@@ -2451,8 +2451,11 @@ srtp_err_status_t srtp_unprotect_mki(srt
         /* check replay database */
         if (!advance_packet_index) {
             status = srtp_rdbx_check(&stream->rtp_rdbx, delta);
-            if (status)
-                return status;
+            if (status) {
+                if (status != srtp_err_status_replay_fail) {
+                    return status;  /* we've been asked to reuse an index */
+                }
+            }
         }
     }
 
Index: libsrtp2-2.3.0/test/srtp_driver.c
===================================================================
--- libsrtp2-2.3.0.orig/test/srtp_driver.c
+++ libsrtp2-2.3.0/test/srtp_driver.c
@@ -1169,8 +1169,8 @@ srtp_err_status_t srtp_test(const srtp_p
     if (policy->rtp.sec_serv & sec_serv_auth) {
         char *data = ((char *)hdr) + (extension_header ? 24 : 12);
 
-        printf("testing for false positives in replay check...");
-
+        printf("testing for false positives in replay check... KURENTO PATCH - TEST DISABLED\n");
+#if 0
         /* unprotect a second time - should fail with a replay error */
         status =
             srtp_test_call_unprotect(srtp_rcvr, hdr, &msg_len_enc, use_mki);
@@ -1183,7 +1183,7 @@ srtp_err_status_t srtp_test(const srtp_p
         } else {
             printf("passed\n");
         }
-
+#endif
         printf("testing for false positives in auth check...");
 
         /* increment sequence number in header */
